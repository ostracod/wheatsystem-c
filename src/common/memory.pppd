
///DESC This file provides common definitions for general-purpose memory operations. Every platform shares the same implementation of these definitions.

///FUNC_TYPE readRangeByAddress_t
    ///RET void
    ///DESC Reads a range of bytes from some location.
    ///ARG destination
        ///TYPE int8_t *
        ///DESC Destination for the data.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte to read.
    ///ARG amount
        ///TYPE int32_t
        ///DESC Number of bytes to read.

///FUNC
    ///RET type
    ///DESC Reads a value from some location determined by `readRange`.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte in the value to read.
    ///ARG readRange
        ///TYPE readRangeByAddress_t
        ///DESC Function to read data.
    ///ARG type
        ///TYPE :Type
        ///DESC Type of value to read.
DEFINE readValueByAddress address readRange type
({type result; readRange(&result, address, sizeof(type)); result;})
END

///FUNC_TYPE writeRangeByAddress_t
    ///RET void
    ///DESC Writes a range of bytes to some location.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte to write.
    ///ARG source
        ///TYPE int8_t *
        ///DESC Source of the data.
    ///ARG amount
        ///TYPE int32_t
        ///DESC Number of bytes to write.

///FUNC
    ///RET void
    ///DESC Writes a value to some location determined by `writeRange`.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte in the destination to write.
    ///ARG writeRange
        ///TYPE writeRangeByAddress_t
        ///DESC Function to write data.
    ///ARG type
        ///TYPE :Type
        ///DESC Type of value to write.
    ///ARG value
        ///TYPE type
        ///DESC Value to write.
DEFINE writeValueByAddress address writeRange type value
({type tempValue = value; writeRange(address, &tempValue, sizeof(type));})
END

///FUNC_TYPE readValueByAddress_t
    ///RET type
    ///DESC Reads a value from some location.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte to read.
    ///ARG type
        ///TYPE :Type
        ///DESC Type of value to read.

///FUNC
    ///RET :Type of `memberName` in `structDefinition`
    ///DESC Reads a member value in the struct at the given address.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte in the struct.
    ///ARG readValue
        ///TYPE readValueByAddress_t
        ///DESC Function to read data.
    ///ARG structDefinition
        ///TYPE :Struct type
        ///DESC Type of struct to read.
    ///ARG memberName
        ///TYPE :Identifier
        ///DESC Name of struct member to read.
DEFINE readStructByAddress address readValue structDefinition memberName
readValue(address + getStructMemberOffset(structDefinition, memberName), getStructMemberType(structDefinition, memberName))
END

///FUNC_TYPE writeValueByAddress_t
    ///RET void
    ///DESC Writes a value to some location.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte to write.
    ///ARG type
        ///TYPE :Type
        ///DESC Type of value to write.
    ///ARG value
        ///TYPE type
        ///DESC Value to write.

///FUNC
    ///RET void
    ///DESC Writes a member value in the struct at the given address.
    ///ARG address
        ///TYPE int32_t
        ///DESC Address of first byte in the struct.
    ///ARG writeValue
        ///TYPE writeValueByAddress_t
        ///DESC Function to write data.
    ///ARG structDefinition
        ///TYPE :Struct type
        ///DESC Type of struct to write.
    ///ARG memberName
        ///TYPE :Identifier
        ///DESC Name of struct member to write.
    ///ARG value
        ///TYPE :Type of `memberName` in `structDefinition`
        ///DESC Value to write.
DEFINE writeStructByAddress address writeValue structDefinition memberName value
writeValue(address + getStructMemberOffset(structDefinition, memberName), getStructMemberType(structDefinition, memberName), value)
END


